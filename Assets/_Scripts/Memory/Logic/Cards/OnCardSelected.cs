using UnityEngine;namespace Memory.Logic{    public static partial class Game    {        private static void OnCardSelected(int cardIndex, int pairIndex)        {            Vector2Int previoslySelectedCards = GetPreviouslySelectedCards();            int currentPair = GetCurrentlySelectedPair();            if (currentPair == -1)            {                if (previoslySelectedCards.x != -1 && previoslySelectedCards.y != -1)                {                    ResetCards?.Invoke(arg1: previoslySelectedCards.x, arg2: previoslySelectedCards.y);                }                SetCurrentlySelectedPair(value: pairIndex);                previoslySelectedCards.x = cardIndex;                CardSelectionEnabled?.Invoke();            }            else if (currentPair == pairIndex)            {                previoslySelectedCards.y = cardIndex;                SetCurrentlySelectedPair(value: -1);                SetMatchedPairs(value: GetMatchedPairs() + 1);                ProgressChanged?.Invoke(arg1: GetMatchedPairs(), arg2: GetCardPairsCount());                PairMatched?.Invoke(obj: pairIndex);                CardSelectionEnabled?.Invoke();                CheckWinCondition();            }            else            {                previoslySelectedCards.y = cardIndex;                SetCurrentlySelectedPair(value: -1);            }            SetPrevioslySelectedCards(previoslySelectedCards);        }    }}