using System;using System.Collections;using Memory.Logic;using UnityEngine;namespace Memory.MonoBehaviours{    public class MemoryCard : MonoBehaviour    {        [SerializeField]        private SpriteRenderer _animalRenderer;        //TODO: MOVE THIS FIELD TO GAMEPLAY SETTINGS        [SerializeField]        private float _cardFlipDuration;        [SerializeField]        private SpriteRenderer _frameRenderer;        private bool _isSelected;        private int _pairIndex;        public event Action<int> Selected;        private void OnEnable()        {            Game.HideAllCards += OnHideAllCards;            Game.ResetCards += OnResetCards;            Game.PairMatched += OnPairMatched;        }        private void OnDisable()        {            Game.HideAllCards -= OnHideAllCards;            Game.ResetCards -= OnResetCards;            Game.PairMatched -= OnPairMatched;        }        public void Init(int index, Sprite frame, Sprite animal)        {            _isSelected = true;            _frameRenderer.sprite = frame;            _animalRenderer.sprite = animal;            _pairIndex = index;        }        public void OnMouseDown()        {            if (_isSelected == false)            {                _isSelected = true;                StartCoroutine(routine: SelectCard());            }        }        private void OnPairMatched(int pairIndex)        {            if (_pairIndex == pairIndex) gameObject.SetActive(value: false);        }        private void OnResetCards(int pairIndex1, int pairIndex2)        {            if ((_pairIndex == pairIndex1 || _pairIndex == pairIndex2) && _isSelected) StartCoroutine(routine: ResetCard());        }        private void OnHideAllCards()        {            StartCoroutine(routine: ResetCard());        }        private IEnumerator SelectCard()        {            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _animalRenderer.enabled = true;            yield return StartCoroutine(routine: FlipNinetyCoroutine());            Selected?.Invoke(obj: _pairIndex);        }        private IEnumerator ResetCard()        {            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _animalRenderer.enabled = false;            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _isSelected = false;        }        private IEnumerator FlipNinetyCoroutine()        {            float t = 0;            Vector3 currentRotation = transform.rotation.eulerAngles;            while (t <= 1)            {                t += Time.deltaTime / _cardFlipDuration;                float lerpedY = Mathf.Lerp(a: currentRotation.y, b: currentRotation.y + 90, t: t);                transform.rotation = Quaternion.Euler(x: currentRotation.x, y: lerpedY, z: currentRotation.z);                yield return null;            }        }    }}