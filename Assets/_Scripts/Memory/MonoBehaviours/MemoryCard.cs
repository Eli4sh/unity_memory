using System;using System.Collections;using Memory.Logic;using UnityEngine;using UnityEngine.EventSystems;namespace Memory.MonoBehaviours{    public class MemoryCard : MonoBehaviour    {        public event Action<int> Selected;        [SerializeField]        private SpriteRenderer _frameRenderer;        [SerializeField]        private SpriteRenderer _animalRenderer;        private int _pairIndex;        private bool _isSelected;        //TODO: MOVE THIS FIELD TO GAMEPLAY SETTINGS        [SerializeField]        private float _cardFlipDuration;        private void OnEnable()        {            Game.HideAllCards += OnHideAllCards;            Game.ResetCards += OnResetCards;            Game.PairMatched += OnPairMatched;        }        private void OnDisable()        {            Game.HideAllCards -= OnHideAllCards;            Game.ResetCards -= OnResetCards;            Game.PairMatched -= OnPairMatched;        }        public void Init(int index, Sprite frame, Sprite animal)        {            _frameRenderer.sprite = frame;            _animalRenderer.sprite = animal;            _pairIndex = index;        }        public void OnMouseDown()        {            if (_isSelected == false)            {                _isSelected = true;                StartCoroutine(SelectCard());            }        }        private void OnPairMatched(int pairIndex)        {            if (_pairIndex == pairIndex)            {                gameObject.SetActive(false);            }        }        private void OnResetCards(int pairIndex1, int pairIndex2)        {            if ((_pairIndex == pairIndex1 || _pairIndex == pairIndex2) && _isSelected)            {                StartCoroutine(ResetCard());            }        }        private void OnHideAllCards()        {            StartCoroutine(ResetCard());        }        private IEnumerator SelectCard()        {            yield return StartCoroutine(FlipNinetyCoroutine());            _animalRenderer.enabled = true;            yield return StartCoroutine(FlipNinetyCoroutine());            Selected?.Invoke(_pairIndex);        }        private IEnumerator ResetCard()        {            yield return StartCoroutine(FlipNinetyCoroutine());            _animalRenderer.enabled = false;            yield return StartCoroutine(FlipNinetyCoroutine());            _isSelected = false;        }        private IEnumerator FlipNinetyCoroutine()        {            float t = 0;            Vector3 currentRotation = transform.rotation.eulerAngles;            while (t <= 1)            {                t += Time.deltaTime / _cardFlipDuration;                float lerpedY = Mathf.Lerp(currentRotation.y, currentRotation.y + 90, t);                transform.rotation = Quaternion.Euler(currentRotation.x, lerpedY, currentRotation.z);                yield return null;            }        }    }}