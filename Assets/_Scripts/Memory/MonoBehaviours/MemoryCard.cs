using System;using System.Collections;using Memory.Logic;using UnityEngine;namespace Memory.MonoBehaviours{    public class MemoryCard : MonoBehaviour    {        public event Action<int> Selected;        public event Action CardSelectFlipStarted;        public event Action CardResetFlipFinished;        [SerializeField]        private SpriteRenderer _animalRenderer;        [SerializeField]        private SpriteRenderer _frameRenderer;        private bool _isSelected;        private bool _selectionEnabled;        private int _pairIndex;        private float _cardFlipDuration;        private void OnEnable()        {            Game.HideAllCards += OnHideAllCards;            Game.ResetCards += OnResetCards;            Game.PairMatched += OnPairMatched;            Game.CardSelectionEnabled += OnCardSelectionEnabled;            Game.CardSelectionDisabled += OnCardSelectionDisabled;        }        private void OnDisable()        {            Game.HideAllCards -= OnHideAllCards;            Game.ResetCards -= OnResetCards;            Game.PairMatched -= OnPairMatched;            Game.CardSelectionEnabled -= OnCardSelectionEnabled;            Game.CardSelectionDisabled -= OnCardSelectionDisabled;        }        public void Init(int index, Sprite frame, Sprite animal, float flipDuration)        {            _selectionEnabled = false;            _frameRenderer.sprite = frame;            _animalRenderer.sprite = animal;            _pairIndex = index;            _cardFlipDuration = flipDuration;        }        public void OnMouseDown()        {            if (_isSelected == false && _selectionEnabled == true)            {                _isSelected = true;                StartCoroutine(routine: SelectCard());                Core.Audio.PlaySound(Core.Enums.AudioType.CARD_CLICK);                CardSelectFlipStarted?.Invoke();            }        }        private void OnCardSelectionEnabled()        {            _selectionEnabled = true;        }        private void OnCardSelectionDisabled()        {            _selectionEnabled = false;        }        private void OnPairMatched(int pairIndex)        {            if (_pairIndex == pairIndex) gameObject.SetActive(value: false);        }        private void OnResetCards(int pairIndex1, int pairIndex2)        {            if ((_pairIndex == pairIndex1 || _pairIndex == pairIndex2) && _isSelected) StartCoroutine(routine: ResetCard());        }        private void OnHideAllCards()        {            StartCoroutine(routine: ResetCard());        }        private IEnumerator SelectCard()        {            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _animalRenderer.enabled = true;            yield return StartCoroutine(routine: FlipNinetyCoroutine());            Selected?.Invoke(obj: _pairIndex);        }        private IEnumerator ResetCard()        {            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _animalRenderer.enabled = false;            yield return StartCoroutine(routine: FlipNinetyCoroutine());            _isSelected = false;            CardResetFlipFinished?.Invoke();        }        private IEnumerator FlipNinetyCoroutine()        {            float t = 0;            Vector3 currentRotation = transform.rotation.eulerAngles;            while (t <= 1)            {                t += Time.deltaTime / _cardFlipDuration;                float lerpedY = Mathf.Lerp(a: currentRotation.y, b: currentRotation.y + 90, t: t);                transform.rotation = Quaternion.Euler(x: currentRotation.x, y: lerpedY, z: currentRotation.z);                yield return null;            }        }    }}