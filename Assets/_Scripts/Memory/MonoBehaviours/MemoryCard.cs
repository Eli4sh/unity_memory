using System;using System.Collections;using DG.Tweening;using Memory.Logic;using UnityEngine;using UnityEngine.Serialization;namespace Memory.MonoBehaviours{    public class MemoryCard : MonoBehaviour    {        public event Action<int, int> Selected;        public event Action<int> PlayCardSound;        public event Action CardSelectFlipStarted;        public event Action CardResetFlipFinished;        [FormerlySerializedAs("_animalRenderer")]        [SerializeField]        private SpriteRenderer _targetRenderer;        [SerializeField]        private SpriteRenderer _frameRenderer;        private int _pairIndex;        private int _cardIndex;        private bool _isSelected;        private bool _selectionEnabled;        private float _cardFadeDuration;        private void OnEnable()        {            Game.HideAllCards += OnHideAllCards;            Game.ResetCards += OnResetCards;            Game.PairMatched += OnPairMatched;            Game.CardSelectionEnabled += OnCardSelectionEnabled;            Game.CardSelectionDisabled += OnCardSelectionDisabled;        }        private void OnDisable()        {            Game.HideAllCards -= OnHideAllCards;            Game.ResetCards -= OnResetCards;            Game.PairMatched -= OnPairMatched;            Game.CardSelectionEnabled -= OnCardSelectionEnabled;            Game.CardSelectionDisabled -= OnCardSelectionDisabled;        }        public void Init(int cardIndex, int pairIndex, Sprite frame, Sprite target, float fadeDuration)        {            _cardIndex = cardIndex;            _pairIndex = pairIndex;            _selectionEnabled = false;            _frameRenderer.sprite = frame;            _targetRenderer.sprite = target;            _cardFadeDuration = fadeDuration;        }        public void OnMouseDown()        {            if (_isSelected == false)            {                _isSelected = true;                SelectCard();                PlayCardSound?.Invoke(_pairIndex);                CardSelectFlipStarted?.Invoke();            }        }        private void OnCardSelectionEnabled()        {            _selectionEnabled = true;        }        private void OnCardSelectionDisabled()        {            _selectionEnabled = false;        }        private void OnPairMatched(int pairIndex)        {            if (_pairIndex == pairIndex)            {                Game.HideAllCards -= OnHideAllCards;                Game.ResetCards -= OnResetCards;                Game.PairMatched -= OnPairMatched;                Game.CardSelectionEnabled -= OnCardSelectionEnabled;                Game.CardSelectionDisabled -= OnCardSelectionDisabled;                SpriteRenderer frameRenderer = GetComponent<SpriteRenderer>();                frameRenderer.DOFade(0, 0.5f).SetEase(Ease.Linear);                _targetRenderer.DOFade(0, 0.4f).SetEase(Ease.Linear);                transform.DOScale(Vector3.zero, 0.5f).SetEase(Ease.InBack).OnComplete(() => gameObject.SetActive(false));            }        }        private void OnResetCards(int cardIndex1, int cardIndex2)        {            if ((_cardIndex == cardIndex1 || _cardIndex == cardIndex2) && _isSelected)            {                ResetCard();            }        }        private void OnHideAllCards()        {            ResetCard();        }        private void SelectCard()        {            _targetRenderer.DOFade(1f, _cardFadeDuration).SetEase(Ease.InOutSine).OnComplete(() => Selected?.Invoke(_cardIndex, _pairIndex));        }        private void ResetCard()        {            _targetRenderer.DOFade(0f, _cardFadeDuration).SetEase(Ease.InOutSine).OnComplete(() =>            {                _isSelected = false;                CardResetFlipFinished?.Invoke();            });        }    }}