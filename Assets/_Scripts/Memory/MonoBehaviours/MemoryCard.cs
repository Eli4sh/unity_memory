using System;using System.Collections;using DG.Tweening;using Memory.Logic;using UnityEngine;namespace Memory.MonoBehaviours{    public class MemoryCard : MonoBehaviour    {        public event Action<int, int> Selected;        public event Action CardSelectFlipStarted;        public event Action CardResetFlipFinished;        [SerializeField]        private SpriteRenderer _animalRenderer;        [SerializeField]        private SpriteRenderer _frameRenderer;        private int _pairIndex;        private int _cardIndex;        private bool _isSelected;        private bool _selectionEnabled;        private float _cardFlipDuration;        private void OnEnable()        {            Game.HideAllCards += OnHideAllCards;            Game.ResetCards += OnResetCards;            Game.PairMatched += OnPairMatched;            Game.CardSelectionEnabled += OnCardSelectionEnabled;            Game.CardSelectionDisabled += OnCardSelectionDisabled;        }        private void OnDisable()        {            Game.HideAllCards -= OnHideAllCards;            Game.ResetCards -= OnResetCards;            Game.PairMatched -= OnPairMatched;            Game.CardSelectionEnabled -= OnCardSelectionEnabled;            Game.CardSelectionDisabled -= OnCardSelectionDisabled;        }        public void Init(int cardIndex, int pairIndex, Sprite frame, Sprite animal, float flipDuration)        {            _cardIndex = cardIndex;            _pairIndex = pairIndex;            _selectionEnabled = false;            _frameRenderer.sprite = frame;            _animalRenderer.sprite = animal;            _cardFlipDuration = flipDuration;        }        public void OnMouseDown()        {            if (_isSelected == false)            {                _isSelected = true;                SelectCard();                Core.Audio.PlaySound(Core.Enums.AudioType.CARD_CLICK);                CardSelectFlipStarted?.Invoke();            }        }        private void OnCardSelectionEnabled()        {            _selectionEnabled = true;        }        private void OnCardSelectionDisabled()        {            _selectionEnabled = false;        }        private void OnPairMatched(int pairIndex)        {            if (_pairIndex == pairIndex) gameObject.SetActive(value: false);        }        private void OnResetCards(int cardIndex1, int cardIndex2)        {            if ((_cardIndex == cardIndex1 || _cardIndex == cardIndex2) && _isSelected)            {                Debug.Log($"Reset card with index {cardIndex1} && {cardIndex2}     my index: {_cardIndex}");                ResetCard();            }        }        private void OnHideAllCards()        {            ResetCard();        }        private void SelectCard()        {            _animalRenderer.DOFade(1f, _cardFlipDuration).SetEase(Ease.InOutSine).OnComplete(() => Selected?.Invoke(_cardIndex, _pairIndex));        }        private void ResetCard()        {            _animalRenderer.DOFade(0f, _cardFlipDuration).SetEase(Ease.InOutSine).OnComplete(() =>            {                _isSelected = false;                CardResetFlipFinished?.Invoke();            });        }    }}